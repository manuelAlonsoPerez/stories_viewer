{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Animation, { AnimationPropType } from '../animation';\nimport { getFontColorFromBackground } from '../utils/scales-utils';\nvar ANIMATED_PROPS = ['colorRange', 'colorDomain', 'color', 'opacityRange', 'opacityDomain', 'opacity', 'x0', 'x1', 'y0', 'y1', 'r'];\n\nvar TreemapLeaf = function (_React$Component) {\n  _inherits(TreemapLeaf, _React$Component);\n\n  function TreemapLeaf() {\n    _classCallCheck(this, TreemapLeaf);\n\n    return _possibleConstructorReturn(this, (TreemapLeaf.__proto__ || Object.getPrototypeOf(TreemapLeaf)).apply(this, arguments));\n  }\n\n  _createClass(TreemapLeaf, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          animation = _props.animation,\n          getLabel = _props.getLabel,\n          mode = _props.mode,\n          node = _props.node,\n          onLeafClick = _props.onLeafClick,\n          onLeafMouseOver = _props.onLeafMouseOver,\n          onLeafMouseOut = _props.onLeafMouseOut,\n          r = _props.r,\n          scales = _props.scales,\n          x0 = _props.x0,\n          x1 = _props.x1,\n          y0 = _props.y0,\n          y1 = _props.y1,\n          style = _props.style;\n\n      if (animation) {\n        return React.createElement(Animation, _extends({}, this.props, {\n          animatedProps: ANIMATED_PROPS\n        }), React.createElement(TreemapLeaf, _extends({}, this.props, {\n          animation: null\n        })));\n      }\n\n      var useCirclePacking = mode === 'circlePack';\n      var background = scales.color(node);\n      var opacity = scales.opacity(node);\n      var color = getFontColorFromBackground(background);\n      var data = node.data;\n      var title = getLabel(data);\n\n      var leafStyle = _extends({\n        top: useCirclePacking ? y0 - r : y0,\n        left: useCirclePacking ? x0 - r : x0,\n        width: useCirclePacking ? r * 2 : x1 - x0,\n        height: useCirclePacking ? r * 2 : y1 - y0,\n        background: background,\n        opacity: opacity,\n        color: color\n      }, style, node.data.style);\n\n      return React.createElement('div', {\n        className: 'rv-treemap__leaf ' + (useCirclePacking ? 'rv-treemap__leaf--circle' : ''),\n        onMouseEnter: function onMouseEnter(event) {\n          return onLeafMouseOver(node, event);\n        },\n        onMouseLeave: function onMouseLeave(event) {\n          return onLeafMouseOut(node, event);\n        },\n        onClick: function onClick(event) {\n          return onLeafClick(node, event);\n        },\n        style: leafStyle\n      }, React.createElement('div', {\n        className: 'rv-treemap__leaf__content'\n      }, title));\n    }\n  }]);\n\n  return TreemapLeaf;\n}(React.Component);\n\nTreemapLeaf.propTypes = {\n  animation: AnimationPropType,\n  height: PropTypes.number.isRequired,\n  mode: PropTypes.string,\n  node: PropTypes.object.isRequired,\n  onLeafClick: PropTypes.func,\n  onLeafMouseOver: PropTypes.func,\n  onLeafMouseOut: PropTypes.func,\n  scales: PropTypes.object.isRequired,\n  width: PropTypes.number.isRequired,\n  r: PropTypes.number.isRequired,\n  x0: PropTypes.number.isRequired,\n  x1: PropTypes.number.isRequired,\n  y0: PropTypes.number.isRequired,\n  y1: PropTypes.number.isRequired\n};\nexport default TreemapLeaf;","map":null,"metadata":{},"sourceType":"module"}