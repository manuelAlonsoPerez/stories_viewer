{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport PropTypes from 'prop-types';\nimport { voronoi } from 'd3-voronoi';\nimport { PureComponent } from 'react';\nimport { AnimationPropType } from '../../animation';\nimport { getAttributeFunctor, getAttr0Functor, getAttributeValue, getScaleObjectFromProps, getScalePropTypesByAttribute } from '../../utils/scales-utils';\n\nvar propTypes = _extends({}, getScalePropTypesByAttribute('x'), getScalePropTypesByAttribute('y'), getScalePropTypesByAttribute('size'), getScalePropTypesByAttribute('opacity'), getScalePropTypesByAttribute('color'), {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  data: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  onValueMouseOver: PropTypes.func,\n  onValueMouseOut: PropTypes.func,\n  onValueClick: PropTypes.func,\n  onValueRightClick: PropTypes.func,\n  onSeriesMouseOver: PropTypes.func,\n  onSeriesMouseOut: PropTypes.func,\n  onSeriesClick: PropTypes.func,\n  onSeriesRightClick: PropTypes.func,\n  onNearestX: PropTypes.func,\n  onNearestXY: PropTypes.func,\n  style: PropTypes.object,\n  animation: AnimationPropType,\n  stack: PropTypes.bool\n});\n\nvar defaultProps = {\n  className: '',\n  stack: false,\n  style: {}\n};\n\nvar AbstractSeries = function (_PureComponent) {\n  _inherits(AbstractSeries, _PureComponent);\n\n  _createClass(AbstractSeries, null, [{\n    key: 'getParentConfig',\n\n    /**\n     * Get a default config for the parent.\n     * @returns {Object} Empty config.\n     */\n    value: function getParentConfig() {\n      return {};\n    }\n  }, {\n    key: 'requiresSVG',\n\n    /**\n     * Tells the rest of the world that it requires SVG to work.\n     * @returns {boolean} Result.\n     */\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  function AbstractSeries(props) {\n    _classCallCheck(this, AbstractSeries);\n\n    var _this = _possibleConstructorReturn(this, (AbstractSeries.__proto__ || Object.getPrototypeOf(AbstractSeries)).call(this, props));\n\n    _this._seriesMouseOverHandler = _this._seriesMouseOverHandler.bind(_this);\n    _this._valueMouseOverHandler = _this._valueMouseOverHandler.bind(_this);\n    _this._seriesMouseOutHandler = _this._seriesMouseOutHandler.bind(_this);\n    _this._valueMouseOutHandler = _this._valueMouseOutHandler.bind(_this);\n    _this._seriesClickHandler = _this._seriesClickHandler.bind(_this);\n    _this._valueClickHandler = _this._valueClickHandler.bind(_this);\n    _this._seriesRightClickHandler = _this._seriesRightClickHandler.bind(_this);\n    _this._valueRightClickHandler = _this._valueRightClickHandler.bind(_this);\n    return _this;\n  }\n  /**\n   * Mouse over handler for the specific series' value.\n   * @param {Object} d Value object\n   * @param {Object} event Event.\n   * @protected\n   */\n\n\n  _createClass(AbstractSeries, [{\n    key: '_valueMouseOverHandler',\n    value: function _valueMouseOverHandler(d, event) {\n      var _props = this.props,\n          onValueMouseOver = _props.onValueMouseOver,\n          onSeriesMouseOver = _props.onSeriesMouseOver;\n\n      if (onValueMouseOver) {\n        onValueMouseOver(d, {\n          event: event\n        });\n      }\n\n      if (onSeriesMouseOver) {\n        onSeriesMouseOver({\n          event: event\n        });\n      }\n    }\n    /**\n     * Mouse over handler for the entire series.\n     * @param {Object} event Event.\n     * @protected\n     */\n\n  }, {\n    key: '_seriesMouseOverHandler',\n    value: function _seriesMouseOverHandler(event) {\n      var onSeriesMouseOver = this.props.onSeriesMouseOver;\n\n      if (onSeriesMouseOver) {\n        onSeriesMouseOver({\n          event: event\n        });\n      }\n    }\n    /**\n     * Mouse out handler for the specific series' value.\n     * @param {Object} d Value object\n     * @param {Object} event Event.\n     * @protected\n     */\n\n  }, {\n    key: '_valueMouseOutHandler',\n    value: function _valueMouseOutHandler(d, event) {\n      var _props2 = this.props,\n          onValueMouseOut = _props2.onValueMouseOut,\n          onSeriesMouseOut = _props2.onSeriesMouseOut;\n\n      if (onValueMouseOut) {\n        onValueMouseOut(d, {\n          event: event\n        });\n      }\n\n      if (onSeriesMouseOut) {\n        onSeriesMouseOut({\n          event: event\n        });\n      }\n    }\n    /**\n     * Mouse out handler for the entire series.\n     * @param {Object} event Event.\n     * @protected\n     */\n\n  }, {\n    key: '_seriesMouseOutHandler',\n    value: function _seriesMouseOutHandler(event) {\n      var onSeriesMouseOut = this.props.onSeriesMouseOut;\n\n      if (onSeriesMouseOut) {\n        onSeriesMouseOut({\n          event: event\n        });\n      }\n    }\n    /**\n     * Click handler for the specific series' value.\n     * @param {Object} d Value object\n     * @param {Object} event Event.\n     * @protected\n     */\n\n  }, {\n    key: '_valueClickHandler',\n    value: function _valueClickHandler(d, event) {\n      var _props3 = this.props,\n          onValueClick = _props3.onValueClick,\n          onSeriesClick = _props3.onSeriesClick;\n\n      if (onValueClick) {\n        onValueClick(d, {\n          event: event\n        });\n      }\n\n      if (onSeriesClick) {\n        onSeriesClick({\n          event: event\n        });\n      }\n    }\n    /**\n     * Right Click handler for the specific series' value.\n     * @param {Object} d Value object\n     * @param {Object} event Event.\n     * @protected\n     */\n\n  }, {\n    key: '_valueRightClickHandler',\n    value: function _valueRightClickHandler(d, event) {\n      var _props4 = this.props,\n          onValueRightClick = _props4.onValueRightClick,\n          onSeriesRightClick = _props4.onSeriesRightClick;\n\n      if (onValueRightClick) {\n        onValueRightClick(d, {\n          event: event\n        });\n      }\n\n      if (onSeriesRightClick) {\n        onSeriesRightClick({\n          event: event\n        });\n      }\n    }\n    /**\n     * Click handler for the entire series.\n     * @param {Object} event Event.\n     * @protected\n     */\n\n  }, {\n    key: '_seriesClickHandler',\n    value: function _seriesClickHandler(event) {\n      var onSeriesClick = this.props.onSeriesClick;\n\n      if (onSeriesClick) {\n        onSeriesClick({\n          event: event\n        });\n      }\n    }\n    /**\n    * Right Click handler for the entire series.\n    * @param {Object} event Event.\n    * @protected\n    */\n\n  }, {\n    key: '_seriesRightClickHandler',\n    value: function _seriesRightClickHandler(event) {\n      var onSeriesRightClick = this.props.onSeriesRightClick;\n\n      if (onSeriesRightClick) {\n        onSeriesRightClick({\n          event: event\n        });\n      }\n    }\n    /**\n     * Get attribute functor.\n     * @param {string} attr Attribute name\n     * @returns {*} Functor.\n     * @protected\n     */\n\n  }, {\n    key: '_getAttributeFunctor',\n    value: function _getAttributeFunctor(attr) {\n      return getAttributeFunctor(this.props, attr);\n    }\n    /**\n     * Get the attr0 functor.\n     * @param {string} attr Attribute name.\n     * @returns {*} Functor.\n     * @private\n     */\n\n  }, {\n    key: '_getAttr0Functor',\n    value: function _getAttr0Functor(attr) {\n      return getAttr0Functor(this.props, attr);\n    }\n    /**\n     * Get the attribute value if it is available.\n     * @param {string} attr Attribute name.\n     * @returns {*} Attribute value if available, fallback value or undefined\n     * otherwise.\n     * @protected\n     */\n\n  }, {\n    key: '_getAttributeValue',\n    value: function _getAttributeValue(attr) {\n      return getAttributeValue(this.props, attr);\n    }\n    /**\n     * Get the scale object distance by the attribute from the list of properties.\n     * @param {string} attr Attribute name.\n     * @returns {number} Scale distance.\n     * @protected\n     */\n\n  }, {\n    key: '_getScaleDistance',\n    value: function _getScaleDistance(attr) {\n      var scaleObject = getScaleObjectFromProps(this.props, attr);\n      return scaleObject ? scaleObject.distance : 0;\n    }\n  }, {\n    key: '_getXYCoordinateInContainer',\n    value: function _getXYCoordinateInContainer(event) {\n      var _props5 = this.props,\n          _props5$marginTop = _props5.marginTop,\n          marginTop = _props5$marginTop === undefined ? 0 : _props5$marginTop,\n          _props5$marginLeft = _props5.marginLeft,\n          marginLeft = _props5$marginLeft === undefined ? 0 : _props5$marginLeft;\n      var evt = event.nativeEvent,\n          currentTarget = event.currentTarget;\n      var rect = currentTarget.getBoundingClientRect();\n      var x = evt.clientX;\n      var y = evt.clientY;\n\n      if (evt.type === 'touchmove') {\n        x = evt.touches[0].pageX;\n        y = evt.touches[0].pageY;\n      }\n\n      return {\n        x: x - rect.left - currentTarget.clientLeft - marginLeft,\n        y: y - rect.top - currentTarget.clientTop - marginTop\n      };\n    }\n  }, {\n    key: '_handleNearestX',\n    value: function _handleNearestX(event) {\n      var _props6 = this.props,\n          onNearestX = _props6.onNearestX,\n          data = _props6.data;\n      var minDistance = Number.POSITIVE_INFINITY;\n      var value = null;\n      var valueIndex = null;\n\n      var coordinate = this._getXYCoordinateInContainer(event);\n\n      var xScaleFn = this._getAttributeFunctor('x');\n\n      data.forEach(function (item, i) {\n        var currentCoordinate = xScaleFn(item);\n        var newDistance = Math.abs(coordinate.x - currentCoordinate);\n\n        if (newDistance < minDistance) {\n          minDistance = newDistance;\n          value = item;\n          valueIndex = i;\n        }\n      });\n\n      if (!value) {\n        return;\n      }\n\n      onNearestX(value, {\n        innerX: xScaleFn(value),\n        index: valueIndex,\n        event: event.nativeEvent\n      });\n    }\n  }, {\n    key: '_handleNearestXY',\n    value: function _handleNearestXY(event) {\n      var _props7 = this.props,\n          onNearestXY = _props7.onNearestXY,\n          data = _props7.data;\n\n      var coordinate = this._getXYCoordinateInContainer(event);\n\n      var xScaleFn = this._getAttributeFunctor('x');\n\n      var yScaleFn = this._getAttributeFunctor('y'); // Create a voronoi with each node center points\n\n\n      var voronoiInstance = voronoi().x(xScaleFn).y(yScaleFn);\n      var foundPoint = voronoiInstance(data).find(coordinate.x, coordinate.y);\n      var value = foundPoint.data;\n\n      if (!value) {\n        return;\n      }\n\n      onNearestXY(value, {\n        innerX: foundPoint.x,\n        innerY: foundPoint.y,\n        index: foundPoint.index,\n        event: event.nativeEvent\n      });\n    }\n  }, {\n    key: 'onParentMouseMove',\n    value: function onParentMouseMove(event) {\n      var _props8 = this.props,\n          onNearestX = _props8.onNearestX,\n          onNearestXY = _props8.onNearestXY,\n          data = _props8.data;\n\n      if (!onNearestX && !onNearestXY || !data) {\n        return;\n      }\n\n      if (onNearestXY) {\n        this._handleNearestXY(event);\n      } else {\n        this._handleNearestX(event);\n      }\n    }\n  }, {\n    key: 'onParentTouchMove',\n    value: function onParentTouchMove(e) {\n      e.preventDefault();\n      this.onParentMouseMove(e);\n    }\n  }, {\n    key: 'onParentTouchStart',\n    value: function onParentTouchStart(e) {\n      // prevent mouse event emulation\n      e.preventDefault();\n    }\n  }]);\n\n  return AbstractSeries;\n}(PureComponent);\n\nAbstractSeries.displayName = 'AbstractSeries';\nAbstractSeries.propTypes = propTypes;\nAbstractSeries.defaultProps = defaultProps;\nexport default AbstractSeries;","map":null,"metadata":{},"sourceType":"module"}