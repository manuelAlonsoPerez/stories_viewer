{"ast":null,"code":"var _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { scaleLinear } from 'd3-scale';\nimport { format } from 'd3-format';\nimport { AnimationPropType } from '../animation';\nimport XYPlot from '../plot/xy-plot';\nimport { DISCRETE_COLOR_RANGE } from '../theme';\nimport { MarginPropType } from '../utils/chart-utils';\nimport LineSeries from '../plot/series/line-series';\nimport LineMarkSeries from '../plot/series/line-mark-series';\nimport LabelSeries from '../plot/series/label-series';\nimport DecorativeAxis from '../plot/axis/decorative-axis';\nvar predefinedClassName = 'rv-parallel-coordinates-chart';\nvar DEFAULT_FORMAT = format('.2r');\n/**\n * Generate axes for each of the domains\n * @param {Object} props\n - props.animation {Boolean}\n - props.domains {Array} array of object specifying the way each axis is to be plotted\n - props.style {object} style object for the whole chart\n - props.tickFormat {Function} formatting function for axes\n * @return {Array} the plotted axis components\n */\n\nfunction getAxes(props) {\n  var animation = props.animation,\n      domains = props.domains,\n      style = props.style,\n      tickFormat = props.tickFormat;\n  return domains.map(function (domain, index) {\n    var sortedDomain = domain.domain;\n\n    var domainTickFormat = function domainTickFormat(t) {\n      return domain.tickFormat ? domain.tickFormat(t) : tickFormat(t);\n    };\n\n    return React.createElement(DecorativeAxis, {\n      animation: animation,\n      key: index + '-axis',\n      axisStart: {\n        x: domain.name,\n        y: 0\n      },\n      axisEnd: {\n        x: domain.name,\n        y: 1\n      },\n      axisDomain: sortedDomain,\n      numberOfTicks: 5,\n      tickValue: domainTickFormat,\n      style: style.axes\n    });\n  });\n}\n/**\n * Generate labels for the ends of the axes\n * @param {Object} props\n - props.domains {Array} array of object specifying the way each axis is to be plotted\n - props.style {object} style object for just the labels\n * @return {Array} the prepped data for the labelSeries\n */\n\n\nfunction getLabels(props) {\n  var domains = props.domains,\n      style = props.style;\n  return domains.map(function (domain, index) {\n    return {\n      x: domain.name,\n      y: 1.1,\n      label: domain.name,\n      style: style\n    };\n  });\n}\n/**\n * Generate the actual lines to be plotted\n * @param {Object} props\n - props.animation {Boolean}\n - props.data {Array} array of object specifying what values are to be plotted\n - props.domains {Array} array of object specifying the way each axis is to be plotted\n - props.style {object} style object for the whole chart\n - props.showMarks {Bool} whether or not to use the line mark series\n * @return {Array} the plotted axis components\n */\n\n\nfunction getLines(props) {\n  var animation = props.animation,\n      colorRange = props.colorRange,\n      domains = props.domains,\n      data = props.data,\n      style = props.style,\n      showMarks = props.showMarks;\n  var scales = domains.reduce(function (acc, _ref) {\n    var domain = _ref.domain,\n        name = _ref.name;\n    acc[name] = scaleLinear().domain(domain).range([0, 1]);\n    return acc;\n  }, {});\n  return data.map(function (row, rowIndex) {\n    var mappedData = domains.map(function (domain, index) {\n      var getValue = domain.getValue,\n          name = domain.name;\n      return {\n        x: name,\n        y: scales[name](getValue ? getValue(row) : row[name])\n      };\n    });\n    var lineProps = {\n      animation: animation,\n      className: predefinedClassName + '-line',\n      key: rowIndex + '-polygon',\n      data: mappedData,\n      color: row.color || colorRange[rowIndex % colorRange.length],\n      style: style.lines\n    };\n    return showMarks ? React.createElement(LineMarkSeries, lineProps) : React.createElement(LineSeries, lineProps);\n  });\n}\n\nvar ParallelCoordinates = function (_Component) {\n  _inherits(ParallelCoordinates, _Component);\n\n  function ParallelCoordinates() {\n    _classCallCheck(this, ParallelCoordinates);\n\n    return _possibleConstructorReturn(this, (ParallelCoordinates.__proto__ || Object.getPrototypeOf(ParallelCoordinates)).apply(this, arguments));\n  }\n\n  _createClass(ParallelCoordinates, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          animation = _props.animation,\n          className = _props.className,\n          children = _props.children,\n          colorRange = _props.colorRange,\n          data = _props.data,\n          domains = _props.domains,\n          height = _props.height,\n          hideInnerMostValues = _props.hideInnerMostValues,\n          margin = _props.margin,\n          onMouseLeave = _props.onMouseLeave,\n          onMouseEnter = _props.onMouseEnter,\n          showMarks = _props.showMarks,\n          style = _props.style,\n          tickFormat = _props.tickFormat,\n          width = _props.width;\n      var axes = getAxes({\n        domains: domains,\n        animation: animation,\n        hideInnerMostValues: hideInnerMostValues,\n        style: style,\n        tickFormat: tickFormat\n      });\n      var lines = getLines({\n        animation: animation,\n        colorRange: colorRange,\n        domains: domains,\n        data: data,\n        showMarks: showMarks,\n        style: style\n      });\n      var labelSeries = React.createElement(LabelSeries, {\n        animation: true,\n        key: className,\n        className: predefinedClassName + '-label',\n        data: getLabels({\n          domains: domains,\n          style: style.labels\n        })\n      });\n      return React.createElement(XYPlot, {\n        height: height,\n        width: width,\n        margin: margin,\n        dontCheckIfEmpty: true,\n        className: className + ' ' + predefinedClassName,\n        onMouseLeave: onMouseLeave,\n        onMouseEnter: onMouseEnter,\n        xType: 'ordinal',\n        yDomain: [0, 1]\n      }, children, axes.concat(lines).concat(labelSeries));\n    }\n  }]);\n\n  return ParallelCoordinates;\n}(Component);\n\nParallelCoordinates.displayName = 'ParallelCoordinates';\nParallelCoordinates.propTypes = {\n  animation: AnimationPropType,\n  className: PropTypes.string,\n  colorType: PropTypes.string,\n  colorRange: PropTypes.arrayOf(PropTypes.string),\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  domains: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    domain: PropTypes.arrayOf(PropTypes.number).isRequired,\n    tickFormat: PropTypes.func\n  })).isRequired,\n  height: PropTypes.number.isRequired,\n  margin: MarginPropType,\n  style: PropTypes.shape({\n    axes: PropTypes.object,\n    labels: PropTypes.object,\n    lines: PropTypes.object\n  }),\n  showMarks: PropTypes.bool,\n  tickFormat: PropTypes.func,\n  width: PropTypes.number.isRequired\n};\nParallelCoordinates.defaultProps = {\n  className: '',\n  colorType: 'category',\n  colorRange: DISCRETE_COLOR_RANGE,\n  style: {\n    axes: {\n      line: {},\n      ticks: {},\n      text: {}\n    },\n    labels: {\n      fontSize: 10,\n      textAnchor: 'middle'\n    },\n    lines: {\n      strokeWidth: 1,\n      strokeOpacity: 1\n    }\n  },\n  tickFormat: DEFAULT_FORMAT\n};\nexport default ParallelCoordinates;","map":null,"metadata":{},"sourceType":"module"}