{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Copyright (c) 2016 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\nimport React from 'react';\nimport TreemapLeaf from './treemap-leaf';\n\nvar TreemapDOM = function (_React$Component) {\n  _inherits(TreemapDOM, _React$Component);\n\n  function TreemapDOM() {\n    _classCallCheck(this, TreemapDOM);\n\n    return _possibleConstructorReturn(this, (TreemapDOM.__proto__ || Object.getPrototypeOf(TreemapDOM)).apply(this, arguments));\n  }\n\n  _createClass(TreemapDOM, [{\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          animation = _props.animation,\n          className = _props.className,\n          height = _props.height,\n          hideRootNode = _props.hideRootNode,\n          getLabel = _props.getLabel,\n          mode = _props.mode,\n          nodes = _props.nodes,\n          width = _props.width,\n          scales = _props.scales,\n          style = _props.style;\n      var useCirclePacking = mode === 'circlePack';\n      return React.createElement('div', {\n        className: 'rv-treemap ' + (useCirclePacking ? 'rv-treemap-circle-packed' : '') + ' ' + className,\n        style: {\n          height: height,\n          width: width\n        }\n      }, nodes.map(function (node, index) {\n        // throw out the rootest node\n        if (hideRootNode && !index) {\n          return null;\n        }\n\n        var nodeProps = _extends({\n          animation: animation,\n          node: node,\n          getLabel: getLabel\n        }, _this2.props, {\n          x0: useCirclePacking ? node.x : node.x0,\n          x1: useCirclePacking ? node.x : node.x1,\n          y0: useCirclePacking ? node.y : node.y0,\n          y1: useCirclePacking ? node.y : node.y1,\n          r: useCirclePacking ? node.r : 1,\n          scales: scales,\n          style: style\n        });\n\n        return React.createElement(TreemapLeaf, _extends({}, nodeProps, {\n          key: 'leaf-' + index\n        }));\n      }));\n    }\n  }]);\n\n  return TreemapDOM;\n}(React.Component);\n\nTreemapDOM.displayName = 'TreemapDOM';\nexport default TreemapDOM;","map":null,"metadata":{},"sourceType":"module"}