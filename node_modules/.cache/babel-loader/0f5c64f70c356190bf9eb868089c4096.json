{"ast":null,"code":"'use strict';\n\nvar _hyphenPattern = /-(.)/g;\n/**\n * Convert a string to camel case.\n *\n * @param  {String} string - The string.\n * @return {String}\n */\n\nfunction camelCase(string) {\n  if (typeof string !== 'string') {\n    // null is an object\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (string.indexOf('-') < 0) {\n    return string;\n  }\n\n  return string.toLowerCase().replace(_hyphenPattern, function (_, character) {\n    return character.toUpperCase();\n  });\n}\n/**\n * Swap key with value in an object.\n *\n * @param  {Object}   obj        - The object.\n * @param  {Function} [override] - The override method.\n * @return {Object}              - The inverted object.\n */\n\n\nfunction invertObject(obj, override) {\n  if (typeof obj !== 'object' || !obj) {\n    // null is an object\n    throw new TypeError('First argument must be an object');\n  }\n\n  var key;\n  var value;\n  var isOverridePresent = typeof override === 'function';\n  var overrides = {};\n  var result = {};\n\n  for (key in obj) {\n    value = obj[key];\n\n    if (isOverridePresent) {\n      overrides = override(key, value);\n\n      if (overrides && overrides.length === 2) {\n        result[overrides[0]] = overrides[1];\n        continue;\n      }\n    }\n\n    if (typeof value === 'string') {\n      result[value] = key;\n    }\n  }\n\n  return result;\n}\n/**\n * Export utilties.\n */\n\n\nmodule.exports = {\n  camelCase: camelCase,\n  invertObject: invertObject\n};","map":null,"metadata":{},"sourceType":"script"}